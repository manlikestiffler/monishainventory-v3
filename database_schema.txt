-- Users and Authentication
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL, -- 'admin', 'staff', 'school_admin'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP
);

-- Schools
CREATE TABLE schools (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address TEXT NOT NULL,
    contact_person VARCHAR(100),
    contact_email VARCHAR(100),
    contact_phone VARCHAR(20),
    student_count INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP
);

-- School Grade Distribution
CREATE TABLE school_grade_distribution (
    id SERIAL PRIMARY KEY,
    school_id INTEGER REFERENCES schools(id),
    grade_range VARCHAR(20), -- 'Primary (1-5)', 'Middle (6-8)', 'High (9-12)'
    student_count INTEGER,
    percentage DECIMAL(5,2),
    academic_year VARCHAR(9), -- '2023-2024'
    UNIQUE(school_id, grade_range, academic_year)
);

-- Product Categories
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    description TEXT,
    parent_category_id INTEGER REFERENCES categories(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Products
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    category_id INTEGER REFERENCES categories(id),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    sku VARCHAR(50) UNIQUE,
    base_price DECIMAL(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP
);

-- Product Sizes
CREATE TABLE product_sizes (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    size VARCHAR(10) NOT NULL, -- 'XS', 'S', 'M', 'L', 'XL' or '26', '28', '30', etc.
    price_adjustment DECIMAL(10,2) DEFAULT 0.00,
    UNIQUE(product_id, size)
);

-- Inventory
CREATE TABLE inventory (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    size_id INTEGER REFERENCES product_sizes(id),
    warehouse_id INTEGER REFERENCES warehouses(id),
    quantity INTEGER NOT NULL DEFAULT 0,
    minimum_stock INTEGER DEFAULT 0,
    maximum_stock INTEGER,
    last_restock_date TIMESTAMP,
    last_count_date TIMESTAMP
);

-- Warehouses
CREATE TABLE warehouses (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location TEXT,
    capacity INTEGER NOT NULL,
    contact_person VARCHAR(100),
    contact_phone VARCHAR(20)
);

-- Orders
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    school_id INTEGER REFERENCES schools(id),
    order_number VARCHAR(50) UNIQUE,
    status VARCHAR(20) NOT NULL, -- 'pending', 'processing', 'completed', 'cancelled'
    total_amount DECIMAL(10,2),
    payment_status VARCHAR(20), -- 'pending', 'completed', 'refunded'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP
);

-- Order Items
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(id),
    product_id INTEGER REFERENCES products(id),
    size_id INTEGER REFERENCES product_sizes(id),
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL
);

-- Returns
CREATE TABLE returns (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(id),
    return_number VARCHAR(50) UNIQUE,
    status VARCHAR(20) NOT NULL, -- 'pending', 'approved', 'completed', 'rejected'
    reason VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP
);

-- Return Items
CREATE TABLE return_items (
    id SERIAL PRIMARY KEY,
    return_id INTEGER REFERENCES returns(id),
    order_item_id INTEGER REFERENCES order_items(id),
    quantity INTEGER NOT NULL,
    reason_details TEXT,
    condition VARCHAR(20) -- 'new', 'damaged', 'wrong_size'
);

-- Quality Metrics
CREATE TABLE quality_metrics (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    category_id INTEGER REFERENCES categories(id),
    rating DECIMAL(3,2), -- Overall satisfaction rating
    return_rate DECIMAL(5,2),
    measurement_period VARCHAR(20), -- 'daily', 'weekly', 'monthly'
    date_recorded DATE NOT NULL,
    UNIQUE(product_id, measurement_period, date_recorded)
);

-- Size Distribution Analytics
CREATE TABLE size_distribution (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    size_id INTEGER REFERENCES product_sizes(id),
    school_id INTEGER REFERENCES schools(id),
    quantity INTEGER NOT NULL,
    percentage DECIMAL(5,2),
    trend_percentage DECIMAL(5,2),
    recorded_date DATE NOT NULL,
    UNIQUE(product_id, size_id, school_id, recorded_date)
);

-- Forecasting
CREATE TABLE demand_forecasts (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    size_id INTEGER REFERENCES product_sizes(id),
    school_id INTEGER REFERENCES schools(id),
    forecast_period VARCHAR(20), -- 'next_month', 'next_quarter', 'next_year'
    expected_demand INTEGER,
    confidence_level DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(product_id, size_id, school_id, forecast_period)
);

-- Seasonal Trends
CREATE TABLE seasonal_trends (
    id SERIAL PRIMARY KEY,
    category_id INTEGER REFERENCES categories(id),
    season VARCHAR(20), -- 'summer', 'winter', 'rainy'
    peak_month INTEGER, -- 1-12
    average_order_size INTEGER,
    year INTEGER,
    UNIQUE(category_id, season, year)
);

-- Inventory Transactions
CREATE TABLE inventory_transactions (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    size_id INTEGER REFERENCES product_sizes(id),
    warehouse_id INTEGER REFERENCES warehouses(id),
    transaction_type VARCHAR(20) NOT NULL, -- 'receipt', 'issue', 'transfer', 'adjustment'
    quantity INTEGER NOT NULL,
    reference_number VARCHAR(50), -- PO number or Order number
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    notes TEXT
);

-- Recommendations
CREATE TABLE inventory_recommendations (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    size_id INTEGER REFERENCES product_sizes(id),
    suggested_stock INTEGER,
    current_stock INTEGER,
    reason TEXT,
    priority VARCHAR(20), -- 'high', 'medium', 'low'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    action_taken BOOLEAN DEFAULT FALSE
);

-- Audit Log
CREATE TABLE audit_log (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    action VARCHAR(50) NOT NULL,
    table_name VARCHAR(50),
    record_id INTEGER,
    old_values JSONB,
    new_values JSONB,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
); 